# SPDX-FileCopyrightText: NVIDIA CORPORATION & AFFILIATES
# Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[project]
name = "cloudai"
dynamic = ["version"]
dependencies = [
  "bokeh~=3.8",
  "pandas~=2.3",
  "tbparse~=0.0.9",
  "toml~=0.10.2",
  "kubernetes~=34.1",
  "pydantic~=2.12",
  "jinja2~=3.1.6",
  "websockets~=15.0.1",
  "rich~=14.2",
  "click~=8.3",
]
requires-python = ">=3.10"
scripts = { cloudai = "cloudai.cli:main", "cloudai-ui" = "cloudai_ui.cli:main" }

  [project.optional-dependencies]
  dev = [
    "ruff~=0.14",
    "pandas-stubs~=2.3",
    "pyright~=1.1",
    "build~=1.3",
    "vulture==2.14",
    "pytest~=8.4",
    "pytest-cov~=7.0",
    "pytest-asyncio~=1.2",
    "import-linter~=2.5",
    "pytest-deadfixtures~=2.2",
    "taplo~=0.9.3",
  ]
  ui = ["dash>=2.14.0", "plotly>=5.15.0"]
  docs = [
    "sphinx~=8.1",
    "nvidia-sphinx-theme~=0.0.8",
    "myst-parser~=4.0",
    "sphinxext-opengraph~=0.13",
    "sphinx-design~=0.6",
    "sphinxcontrib-mermaid~=1.0",
    "sphinx-copybutton~=0.5",
  ]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.version]
source = "scm"
fallback_version = "1.5.0+unknown"

[tool.ruff]
line-length = 120

  [tool.ruff.format]
  indent-style = "space"

  [tool.ruff.lint]
  select = ["I", "B", "E", "D", "F", "SIM", "W", "C90", "EXE", "ERA", "RUF"]
  ignore = [
    "D407", # Missing dashed underline after section
    "D203", # conflicts with D211
    "D212", # conflicts with D213
    "D413", # Missing blank line after last section

    # TODO: Remove these once we have docstrings
    "D100", # Missing docstring in public module
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in `__init__`
  ]

    [tool.ruff.lint.per-file-ignores]
    "**/tests/*" = ["D"]

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src", "."]
addopts = "--strict-markers -m 'not ci_only'"
empty_parameter_set_mark = "fail_at_collect"
markers = ["ci_only: mark test as CI-only"]
filterwarnings = ["error"]

[tool.importlinter]
root_package = "cloudai"

  [[tool.importlinter.contracts]]
  name = "_core is not accessed directly"
  type = "forbidden"
  forbidden_modules = ["cloudai._core"]
  allow_indirect_imports = true # this is to allow "from cloudai import ..." via core.py
  source_modules = [
    "cloudai.systems",
    "cloudai.workloads",
    "cloudai.util",
    "cloudai.cli",
    "cloudai.report_generator",
  ]

  [[tool.importlinter.contracts]]
  name = "Report generator is leaf dependency"
  type = "forbidden"
  forbidden_modules = ["cloudai.systems", "cloudai.workloads", "cloudai.cli"]
  allow_indirect_imports = true                                               # allow "from cloudai.core import ..."
  source_modules = ["cloudai.report_generator"]

  [[tool.importlinter.contracts]]
  name = "Util modules are leaf dependencies"
  type = "forbidden"
  forbidden_modules = ["cloudai.systems", "cloudai.workloads", "cloudai.cli"]
  source_modules = ["cloudai.util"]

[tool.vulture]
ignore_names = ["mock_datetime_now"]
min_confidence = 100

[tool.coverage.report]
exclude_also = ["@abstractmethod"]

[tool.pyright]
include = ["src", "tests"]
exclude = ["src/cloudai/workloads/nemo_run/cloudai_nemorun.py"]
